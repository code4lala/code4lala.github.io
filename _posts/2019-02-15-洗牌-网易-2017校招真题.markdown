---
layout: post
title:  "洗牌 2017校招真题 网易"
date:   2019-02-15 10:28:49 +0800
categories: 网易 笔试题 校招真题
lang: zh
---

[原题链接](https://www.nowcoder.com/practice/5a0a2c7e431e4fbbbb1ff32ac6e8dfa0)

`题目描述`
洗牌在生活中十分常见，现在需要写一个程序模拟洗牌的过程。 现在需要洗2n张牌，从上到下依次是第1张，第2张，第3张一直到第2n张。首先，我们把这2n张牌分成两堆，左手拿着第1张到第n张（上半堆），右手拿着第n+1张到第2n张（下半堆）。接着就开始洗牌的过程，先放下右手的最后一张牌，再放下左手的最后一张牌，接着放下右手的倒数第二张牌，再放下左手的倒数第二张牌，直到最后放下左手的第一张牌。接着把牌合并起来就可以了。 例如有6张牌，最开始牌的序列是1,2,3,4,5,6。首先分成两组，左手拿着1,2,3；右手拿着4,5,6。在洗牌过程中按顺序放下了6,3,5,2,4,1。把这六张牌再次合成一组牌之后，我们按照从上往下的顺序看这组牌，就变成了序列1,4,2,5,3,6。 现在给出一个原始牌组，请输出这副牌洗牌k次之后从上往下的序列。

`输入描述`
第一行一个数T(T ≤ 100)，表示数据组数。对于每组数据，第一行两个数n,k(1 ≤ n,k ≤ 100)，接下来一行有2n个数a1,a2,...,a2n(1 ≤ ai ≤ 1000000000)。表示原始牌组从上到下的序列。

`输出描述`
对于每组数据，输出一行，最终的序列。数字之间用空格隔开，不要在行末输出多余的空格。

`示例输入`
{% highlight cpp %}
3
3 1
1 2 3 4 5 6
3 2
1 2 3 4 5 6
2 2
1 1 1 1
{% endhighlight %}

`示例输出`
{% highlight cpp %}
1 4 2 5 3 6
1 5 4 3 2 6
1 1 1 1
{% endhighlight %}

解题
=

`注意事项`
原题输入输出示例长得是这个样子

`输入`
{% highlight cpp %}
3 3 1 1 2 3 4 5 6 3 2 1 2 3 4 5 6 2 2 1 1 1 1
{% endhighlight %}
`输出`
{% highlight cpp %}
1 4 2 5 3 6 1 5 4 3 2 6 1 1 1 1
{% endhighlight %}

没仔细看`输出描述`的我就按着给的样子输出了，只有空格，整个在一行中，结果怎么都过不去。
然后找了朋友帮忙写了一遍看看自己输出跟他的输出不一样在哪，发现需要输出换行。真是\*\*\*\*了。

思路很简单，直接模拟即可。注意`每次换牌时操作都是一样的`，故可以把操作先记录下来，然后每次洗牌就按照特定操作来进行就可以了。

{% highlight cpp %}
#include <iostream>
using namespace std;
int main(int argc, char **argv) {
    int T;
    cin >> T;
    const int size = 210;
    int a[size];
    int b[size];
    int c[size];
    int n, k;
    while (T--) {
        cin >> n >> k;
        // 洗牌操作
        for (int i = 1; i <= n; i++) {
            a[2 * i - 1] = i;
            a[2 * i] = i + n;
        }
        // 输入数据
        for (int i = 1; i <= 2 * n; i++) {
            cin >> b[i];
        }
        // 洗k次
        for (int i = 0; i < k; i++) {
            for (int j = 1; j <= 2 * n; j++) {
                c[j] = b[a[j]];
            }
            for (int j = 1; j <= 2 * n; j++) {
                b[j] = c[j];
            }
        }
        // 输出
        if (T) {
            for (int i = 1; i < 2 * n; i++) {
                cout << b[i] << " ";
            }
            cout << b[2 * n] << endl;
        } else {
            for (int i = 1; i < 2 * n; i++) {
                cout << b[i] << " ";
            }
            cout << b[2 * n];
        }
    }

    return 0;
}

{% endhighlight %}

`运行结果`

运行时间：14ms

占用内存：540k

`一定要注意输出格式！！！`

